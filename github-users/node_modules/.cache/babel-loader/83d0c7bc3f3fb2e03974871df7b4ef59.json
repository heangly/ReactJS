{"ast":null,"code":"var _jsxFileName = \"/Users/heangly/Desktop/Self-Development/02-ReactJs/Projects/github-users/src/context/context.js\";\nimport React, { useState, useEffect } from 'react';\nimport mockUser from './mockData.js/mockUser';\nimport mockRepos from './mockData.js/mockRepos';\nimport mockFollowers from './mockData.js/mockFollowers';\nimport axios from 'axios';\nconst rootUrl = 'https://api.github.com';\nconst GithubContext = React.createContext();\n\nconst GithubProvider = ({\n  children\n}) => {\n  const [githubUser, setGithubUser] = useState(mockUser);\n  const [repos, setRepos] = useState(mockRepos);\n  const [followers, setFollowers] = useState(mockFollowers); // request loading\n\n  const [requests, setRequests] = useState(0);\n  const [loading, setIsLoading] = useState(false); // check rate\n\n  const checkRequests = async () => {\n    try {\n      const {\n        data: {\n          rate: {\n            remaining\n          }\n        }\n      } = await axios(`${rootUrl}/rate_limit`);\n      setRequests(remaining);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // error\n\n\n  useEffect(() => {\n    checkRequests();\n  }, []);\n  return /*#__PURE__*/React.createElement(GithubContext.Provider, {\n    value: {\n      githubUser,\n      repos,\n      followers\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport { GithubProvider, GithubContext };","map":{"version":3,"sources":["/Users/heangly/Desktop/Self-Development/02-ReactJs/Projects/github-users/src/context/context.js"],"names":["React","useState","useEffect","mockUser","mockRepos","mockFollowers","axios","rootUrl","GithubContext","createContext","GithubProvider","children","githubUser","setGithubUser","repos","setRepos","followers","setFollowers","requests","setRequests","loading","setIsLoading","checkRequests","data","rate","remaining","error","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,wBAAhB;AAEA,MAAMC,aAAa,GAAGR,KAAK,CAACS,aAAN,EAAtB;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACvC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAACE,QAAD,CAA5C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAACG,SAAD,CAAlC;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAACI,aAAD,CAA1C,CAHuC,CAIvC;;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACmB,OAAD,EAAUC,YAAV,IAA0BpB,QAAQ,CAAC,KAAD,CAAxC,CANuC,CAOvC;;AACA,QAAMqB,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAM;AACJC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE;AAAEC,YAAAA;AAAF;AADF;AADF,UAIF,MAAMnB,KAAK,CAAE,GAAEC,OAAQ,aAAZ,CAJf;AAKAY,MAAAA,WAAW,CAACM,SAAD,CAAX;AACD,KAPD,CAOE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAXD,CARuC,CAqBvC;;;AACAxB,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEV,MAAAA,UAAF;AAAcE,MAAAA,KAAd;AAAqBE,MAAAA;AAArB,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,QADH,CADF;AAKD,CA/BD;;AAiCA,SAASD,cAAT,EAAyBF,aAAzB","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport mockUser from './mockData.js/mockUser';\nimport mockRepos from './mockData.js/mockRepos';\nimport mockFollowers from './mockData.js/mockFollowers';\nimport axios from 'axios';\n\nconst rootUrl = 'https://api.github.com';\n\nconst GithubContext = React.createContext();\n\nconst GithubProvider = ({ children }) => {\n  const [githubUser, setGithubUser] = useState(mockUser);\n  const [repos, setRepos] = useState(mockRepos);\n  const [followers, setFollowers] = useState(mockFollowers);\n  // request loading\n  const [requests, setRequests] = useState(0);\n  const [loading, setIsLoading] = useState(false);\n  // check rate\n  const checkRequests = async () => {\n    try {\n      const {\n        data: {\n          rate: { remaining },\n        },\n      } = await axios(`${rootUrl}/rate_limit`);\n      setRequests(remaining);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // error\n  useEffect(() => {\n    checkRequests();\n  }, []);\n\n  return (\n    <GithubContext.Provider value={{ githubUser, repos, followers }}>\n      {children}\n    </GithubContext.Provider>\n  );\n};\n\nexport { GithubProvider, GithubContext };\n"]},"metadata":{},"sourceType":"module"}