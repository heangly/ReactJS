{"ast":null,"code":"var _jsxFileName = \"/Users/heangly/Desktop/Self-Development/02-ReactJs/Projects/github-users/src/context/context.js\";\nimport React, { useState, useEffect } from 'react';\nimport mockUser from './mockData.js/mockUser';\nimport mockRepos from './mockData.js/mockRepos';\nimport mockFollowers from './mockData.js/mockFollowers';\nimport axios from 'axios';\nconst rootUrl = 'https://api.github.com';\nconst GithubContext = React.createContext();\n\nconst GithubProvider = ({\n  children\n}) => {\n  const [githubUser, setGithubUser] = useState(mockUser);\n  const [repos, setRepos] = useState(mockRepos);\n  const [followers, setFollowers] = useState(mockFollowers); // request loading\n\n  const [requests, setRequests] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState({\n    show: false,\n    msg: ''\n  });\n\n  const searchGithubUser = async user => {\n    // toggle error\n    // toggle loading\n    toggleError();\n    setIsLoading(true);\n    const response = await axios.get(`${rootUrl}/users/${user}`).catch(error => console.log(error));\n\n    if (response) {\n      setGithubUser(response.data);\n      await Promise.AllSettled(axios(`${rootUrl}/users/${login}/repos?per_page=100`, axios(`${followers_url}?per_page=100`)));\n    } else {\n      toggleError(true, 'there is no user with that username');\n    }\n\n    checkRequests();\n    setIsLoading(false);\n  };\n\n  const toggleError = (show = false, msg = '') => {\n    setError({\n      show,\n      msg\n    });\n  }; // check rate\n\n\n  const checkRequests = async () => {\n    const {\n      data: {\n        rate: {\n          remaining\n        }\n      }\n    } = await axios.get(`${rootUrl}/rate_limit`).catch(error => console.log(error));\n    setRequests(remaining);\n\n    if (remaining === 0) {\n      toggleError(true, 'sorry, you have exceeded your hourly rate limit!');\n    }\n  }; // errors\n\n\n  useEffect(() => {\n    checkRequests();\n  }, []);\n  return /*#__PURE__*/React.createElement(GithubContext.Provider, {\n    value: {\n      githubUser,\n      repos,\n      followers,\n      requests,\n      error,\n      searchGithubUser,\n      isLoading\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport { GithubProvider, GithubContext };","map":{"version":3,"sources":["/Users/heangly/Desktop/Self-Development/02-ReactJs/Projects/github-users/src/context/context.js"],"names":["React","useState","useEffect","mockUser","mockRepos","mockFollowers","axios","rootUrl","GithubContext","createContext","GithubProvider","children","githubUser","setGithubUser","repos","setRepos","followers","setFollowers","requests","setRequests","isLoading","setIsLoading","error","setError","show","msg","searchGithubUser","user","toggleError","response","get","catch","console","log","data","Promise","AllSettled","login","followers_url","checkRequests","rate","remaining"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,wBAAhB;AAEA,MAAMC,aAAa,GAAGR,KAAK,CAACS,aAAN,EAAtB;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACvC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAACE,QAAD,CAA5C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAACG,SAAD,CAAlC;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAACI,aAAD,CAA1C,CAHuC,CAIvC;;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACqB,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC;AAAEuB,IAAAA,IAAI,EAAE,KAAR;AAAeC,IAAAA,GAAG,EAAE;AAApB,GAAD,CAAlC;;AAEA,QAAMC,gBAAgB,GAAG,MAAOC,IAAP,IAAgB;AACvC;AACA;AACAC,IAAAA,WAAW;AACXP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEA,UAAMQ,QAAQ,GAAG,MAAMvB,KAAK,CACzBwB,GADoB,CACf,GAAEvB,OAAQ,UAASoB,IAAK,EADT,EAEpBI,KAFoB,CAEbT,KAAD,IAAWU,OAAO,CAACC,GAAR,CAAYX,KAAZ,CAFG,CAAvB;;AAIA,QAAIO,QAAJ,EAAc;AACZhB,MAAAA,aAAa,CAACgB,QAAQ,CAACK,IAAV,CAAb;AAEA,YAAMC,OAAO,CAACC,UAAR,CACJ9B,KAAK,CACF,GAAEC,OAAQ,UAAS8B,KAAM,qBADvB,EAEH/B,KAAK,CAAE,GAAEgC,aAAc,eAAlB,CAFF,CADD,CAAN;AAMD,KATD,MASO;AACLV,MAAAA,WAAW,CAAC,IAAD,EAAO,qCAAP,CAAX;AACD;;AACDW,IAAAA,aAAa;AACblB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAxBD;;AA0BA,QAAMO,WAAW,GAAG,CAACJ,IAAI,GAAG,KAAR,EAAeC,GAAG,GAAG,EAArB,KAA4B;AAC9CF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,CAAR;AACD,GAFD,CAnCuC,CAuCvC;;;AACA,QAAMc,aAAa,GAAG,YAAY;AAChC,UAAM;AACJL,MAAAA,IAAI,EAAE;AACJM,QAAAA,IAAI,EAAE;AAAEC,UAAAA;AAAF;AADF;AADF,QAIF,MAAMnC,KAAK,CACZwB,GADO,CACF,GAAEvB,OAAQ,aADR,EAEPwB,KAFO,CAEAT,KAAD,IAAWU,OAAO,CAACC,GAAR,CAAYX,KAAZ,CAFV,CAJV;AAQAH,IAAAA,WAAW,CAACsB,SAAD,CAAX;;AACA,QAAIA,SAAS,KAAK,CAAlB,EAAqB;AACnBb,MAAAA,WAAW,CAAC,IAAD,EAAO,kDAAP,CAAX;AACD;AACF,GAbD,CAxCuC,CAuDvC;;;AACA1B,EAAAA,SAAS,CAAC,MAAM;AACdqC,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACL3B,MAAAA,UADK;AAELE,MAAAA,KAFK;AAGLE,MAAAA,SAHK;AAILE,MAAAA,QAJK;AAKLI,MAAAA,KALK;AAMLI,MAAAA,gBANK;AAOLN,MAAAA;AAPK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWGT,QAXH,CADF;AAeD,CA3ED;;AA6EA,SAASD,cAAT,EAAyBF,aAAzB","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport mockUser from './mockData.js/mockUser';\nimport mockRepos from './mockData.js/mockRepos';\nimport mockFollowers from './mockData.js/mockFollowers';\nimport axios from 'axios';\n\nconst rootUrl = 'https://api.github.com';\n\nconst GithubContext = React.createContext();\n\nconst GithubProvider = ({ children }) => {\n  const [githubUser, setGithubUser] = useState(mockUser);\n  const [repos, setRepos] = useState(mockRepos);\n  const [followers, setFollowers] = useState(mockFollowers);\n  // request loading\n  const [requests, setRequests] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState({ show: false, msg: '' });\n\n  const searchGithubUser = async (user) => {\n    // toggle error\n    // toggle loading\n    toggleError();\n    setIsLoading(true);\n\n    const response = await axios\n      .get(`${rootUrl}/users/${user}`)\n      .catch((error) => console.log(error));\n\n    if (response) {\n      setGithubUser(response.data);\n\n      await Promise.AllSettled(\n        axios(\n          `${rootUrl}/users/${login}/repos?per_page=100`,\n          axios(`${followers_url}?per_page=100`)\n        )\n      );\n    } else {\n      toggleError(true, 'there is no user with that username');\n    }\n    checkRequests();\n    setIsLoading(false);\n  };\n\n  const toggleError = (show = false, msg = '') => {\n    setError({ show, msg });\n  };\n\n  // check rate\n  const checkRequests = async () => {\n    const {\n      data: {\n        rate: { remaining },\n      },\n    } = await axios\n      .get(`${rootUrl}/rate_limit`)\n      .catch((error) => console.log(error));\n\n    setRequests(remaining);\n    if (remaining === 0) {\n      toggleError(true, 'sorry, you have exceeded your hourly rate limit!');\n    }\n  };\n\n  // errors\n  useEffect(() => {\n    checkRequests();\n  }, []);\n\n  return (\n    <GithubContext.Provider\n      value={{\n        githubUser,\n        repos,\n        followers,\n        requests,\n        error,\n        searchGithubUser,\n        isLoading,\n      }}\n    >\n      {children}\n    </GithubContext.Provider>\n  );\n};\n\nexport { GithubProvider, GithubContext };\n"]},"metadata":{},"sourceType":"module"}