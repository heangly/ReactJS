{"ast":null,"code":"var _jsxFileName = \"/Users/heangly/Desktop/Self-Development/02-ReactJs/Projects/github-users/src/context/context.js\";\nimport React, { useState, useEffect } from 'react';\nimport mockUser from './mockData.js/mockUser';\nimport mockRepos from './mockData.js/mockRepos';\nimport mockFollowers from './mockData.js/mockFollowers';\nimport axios from 'axios';\nconst rootUrl = 'https://api.github.com';\nconst GithubContext = React.createContext();\n\nconst GithubProvider = ({\n  children\n}) => {\n  const [githubUser, setGithubUser] = useState(mockUser);\n  const [repos, setRepos] = useState(mockRepos);\n  const [followers, setFollowers] = useState(mockFollowers); // request loading\n\n  const [requests, setRequests] = useState(0);\n  const [loading, setIsLoading] = useState(false);\n  const [error, setError] = useState({\n    show: false,\n    msg: ''\n  });\n\n  const toggleError = (show, msg) => {\n    setError({\n      show,\n      msg\n    });\n  }; // check rate\n\n\n  const checkRequests = async () => {\n    try {\n      const {\n        data: {\n          rate: {\n            remaining\n          }\n        }\n      } = await axios(`${rootUrl}/rate_limit`);\n      setRequests(remaining);\n\n      if (remaining === 0) {\n        toggleError();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // error\n\n\n  useEffect(() => {\n    checkRequests();\n  }, []);\n  return /*#__PURE__*/React.createElement(GithubContext.Provider, {\n    value: {\n      githubUser,\n      repos,\n      followers,\n      requests\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport { GithubProvider, GithubContext };","map":{"version":3,"sources":["/Users/heangly/Desktop/Self-Development/02-ReactJs/Projects/github-users/src/context/context.js"],"names":["React","useState","useEffect","mockUser","mockRepos","mockFollowers","axios","rootUrl","GithubContext","createContext","GithubProvider","children","githubUser","setGithubUser","repos","setRepos","followers","setFollowers","requests","setRequests","loading","setIsLoading","error","setError","show","msg","toggleError","checkRequests","data","rate","remaining","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,wBAAhB;AAEA,MAAMC,aAAa,GAAGR,KAAK,CAACS,aAAN,EAAtB;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACvC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAACE,QAAD,CAA5C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAACG,SAAD,CAAlC;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAACI,aAAD,CAA1C,CAHuC,CAIvC;;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACmB,OAAD,EAAUC,YAAV,IAA0BpB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACqB,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC;AAAEuB,IAAAA,IAAI,EAAE,KAAR;AAAeC,IAAAA,GAAG,EAAE;AAApB,GAAD,CAAlC;;AAEA,QAAMC,WAAW,GAAG,CAACF,IAAD,EAAOC,GAAP,KAAe;AACjCF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,CAAR;AACD,GAFD,CATuC,CAavC;;;AACA,QAAME,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAM;AACJC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE;AAAEC,YAAAA;AAAF;AADF;AADF,UAIF,MAAMxB,KAAK,CAAE,GAAEC,OAAQ,aAAZ,CAJf;AAMAY,MAAAA,WAAW,CAACW,SAAD,CAAX;;AACA,UAAIA,SAAS,KAAK,CAAlB,EAAqB;AACnBJ,QAAAA,WAAW;AACZ;AACF,KAXD,CAWE,OAAOJ,KAAP,EAAc;AACdS,MAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACD;AACF,GAfD,CAduC,CA+BvC;;;AACApB,EAAAA,SAAS,CAAC,MAAM;AACdyB,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEf,MAAAA,UAAF;AAAcE,MAAAA,KAAd;AAAqBE,MAAAA,SAArB;AAAgCE,MAAAA;AAAhC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,QADH,CADF;AAKD,CAzCD;;AA2CA,SAASD,cAAT,EAAyBF,aAAzB","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport mockUser from './mockData.js/mockUser';\nimport mockRepos from './mockData.js/mockRepos';\nimport mockFollowers from './mockData.js/mockFollowers';\nimport axios from 'axios';\n\nconst rootUrl = 'https://api.github.com';\n\nconst GithubContext = React.createContext();\n\nconst GithubProvider = ({ children }) => {\n  const [githubUser, setGithubUser] = useState(mockUser);\n  const [repos, setRepos] = useState(mockRepos);\n  const [followers, setFollowers] = useState(mockFollowers);\n  // request loading\n  const [requests, setRequests] = useState(0);\n  const [loading, setIsLoading] = useState(false);\n  const [error, setError] = useState({ show: false, msg: '' });\n\n  const toggleError = (show, msg) => {\n    setError({ show, msg });\n  };\n\n  // check rate\n  const checkRequests = async () => {\n    try {\n      const {\n        data: {\n          rate: { remaining },\n        },\n      } = await axios(`${rootUrl}/rate_limit`);\n\n      setRequests(remaining);\n      if (remaining === 0) {\n        toggleError();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // error\n  useEffect(() => {\n    checkRequests();\n  }, []);\n\n  return (\n    <GithubContext.Provider value={{ githubUser, repos, followers, requests }}>\n      {children}\n    </GithubContext.Provider>\n  );\n};\n\nexport { GithubProvider, GithubContext };\n"]},"metadata":{},"sourceType":"module"}