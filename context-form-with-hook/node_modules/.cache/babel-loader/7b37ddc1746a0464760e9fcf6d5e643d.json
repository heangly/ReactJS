{"ast":null,"code":"var _jsxFileName = \"/Users/heangly/Desktop/Self-Development/2-ReactJs/Projects/context-form-with-hook/src/contexts/ThemeContext.js\";\nimport React, { createContext, Component } from 'react';\nexport const ThemeContext = createContext();\nexport class ThemeProvider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDarkMode: false\n    };\n    this.toggleTheme = this.toggleTheme.bind(this);\n  }\n\n  toggleTheme() {\n    this.setState({\n      isDarkMode: !this.state.isDarkMode\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n      value: { ...this.state,\n        toggleTheme: this.toggleTheme\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}","map":{"version":3,"sources":["/Users/heangly/Desktop/Self-Development/2-ReactJs/Projects/context-form-with-hook/src/contexts/ThemeContext.js"],"names":["React","createContext","Component","ThemeContext","ThemeProvider","constructor","props","state","isDarkMode","toggleTheme","bind","setState","render","children"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,SAA9B,QAA8C,OAA9C;AAEA,OAAO,MAAMC,YAAY,GAAGF,aAAa,EAAlC;AAEP,OAAO,MAAMG,aAAN,SAA4BF,SAA5B,CAAqC;AAC1CG,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,UAAU,EAAE;AAAb,KAAb;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDD,EAAAA,WAAW,GAAE;AACX,SAAKE,QAAL,CAAc;AAACH,MAAAA,UAAU,EAAE,CAAC,KAAKD,KAAL,CAAWC;AAAzB,KAAd;AACD;;AAEDI,EAAAA,MAAM,GAAE;AACN,wBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,MAAA,KAAK,EAAE,EAAC,GAAG,KAAKL,KAAT;AAAgBE,QAAAA,WAAW,EAAC,KAAKA;AAAjC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKH,KAAL,CAAWO,QADd,CADF;AAKD;;AAjByC","sourcesContent":["import React, {createContext, Component} from 'react';\n\nexport const ThemeContext = createContext();\n\nexport class ThemeProvider extends Component{\n  constructor(props){\n    super(props);\n    this.state = {isDarkMode: false};\n    this.toggleTheme = this.toggleTheme.bind(this);\n  }\n\n  toggleTheme(){\n    this.setState({isDarkMode: !this.state.isDarkMode});\n  }\n\n  render(){\n    return(\n      <ThemeContext.Provider value={{...this.state, toggleTheme:this.toggleTheme}}>\n        {this.props.children}\n      </ThemeContext.Provider>\n    )\n  }\n\n\n}"]},"metadata":{},"sourceType":"module"}